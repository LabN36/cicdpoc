name: IOS Deployment
on:
    push:
      branches:
        - main
jobs:
  build_android:
    name: Building IOS 
    runs-on: macos-latest
    steps:

      - name: Cache Flutter
        id: flutterCache
        uses: actions/cache@v3
        with:
          path: /opt/
          key: ${{ runner.OS }}-fllutter-cache-1
          # restore-keys: |
          #   ${{ runner.OS }}-flutter-cache
      


      - name: Setup Flutter
        if: steps.flutterCache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v1
        with:
          flutter-version: 3.7.12
        
      - name: Setup Ruby
        if: steps.flutterCache.outputs.cache-hit != 'true'
        uses: ruby/setup-ruby@v1
        with:
            ruby-version: '3.0'
            bundler-cache: true

      - name: Setup Java
        if: steps.flutterCache.outputs.cache-hit != 'true'
        uses: actions/setup-java@v1
        with:
            java-version: 11
    
      - name: Check xcodebuild Version
        run: |
            which xcodebuild
            xcodebuild -version

      - uses: actions/checkout@v3
      - name: Checkout Source Code
        env:
          IOS_DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION: ${{ secrets.IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION }}
          IOS_ENCRYION_PASSPHRASE: ${{ secrets.IOS_ENCRYION_PASSPHRASE }}
        run: |
          echo "$IOS_DISTRIBUTION_CERTIFICATE" > ios/IOS_DISTRIBUTION_CERTIFICATE.asc
          echo "$IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION" > ios/IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION.asc
          gpg -d --passphrase $IOS_ENCRYION_PASSPHRASE --batch ios/IOS_DISTRIBUTION_CERTIFICATE.asc > ios/IOS_DISTRIBUTION_CERTIFICATE.p12
          gpg -d --passphrase $IOS_ENCRYION_PASSPHRASE --batch ios/IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION.asc > ios/IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION.mobileprovision


          CERTIFICATE_PATH=`pwd`/ios/IOS_DISTRIBUTION_CERTIFICATE.p12
          PP_PATH=`pwd`/ios/IOS_CICD_POC_DISTRIBUTIONMOBILEPROVISION.mobileprovision
          KEYCHAIN_PATH=`pwd`/ios/app-signing.keychain-db

          echo "$CERTIFICATE_PATH"

          security create-keychain -p "$IOS_ENCRYION_PASSPHRASE" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$IOS_ENCRYION_PASSPHRASE" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$IOS_ENCRYION_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          ls -la ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build IPA
        working-directory: ./ios
        run: |
          EXPORT_OPTION=`pwd`/exportOptions.plist
          echo "$EXPORT_OPTION"
          flutter build ipa -v --export-options-plist=/Users/runner/work/cicdpoc/cicdpoc/ios/exportOptions.plist

    #   - name: Run Fastlane
    #     working-directory: ./android
    #     env:
    #       flavor: ${{ inputs.flavor }}
    #       build_name: ${{ inputs.build_name }}
    #       build_number: ${{ inputs.build_number }}
    #       build_type: ${{ inputs.build_type }}
    #       fad_upload: ${{ inputs.fad_upload }}
    #       playstore_upload: ${{ inputs.playstore_upload }}
    #     run: bundle exec fastlane fad flavor:"$flavor" build_name:"$build_name" build_number:"$build_number" build_type:"$build_type" fad_upload:"$fad_upload" playstore_upload:"$playstore_upload"

    #   - uses: actions/upload-artifact@v4
    #     if: ${{ inputs.artifact_upload }}
    #     with:
    #        name: android-build
    #        path: |
    #         build/app/outputs/apk/
